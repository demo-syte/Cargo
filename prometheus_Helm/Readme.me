To monitor the state and performance of the Celery instances in your Kubernetes cluster using Prometheus and Grafana, you'll need to set up multiple components:

1. Prometheus to collect metrics.
2. Grafana for visualization.
3. Helm charts to manage the deployment of these components in a Kubernetes cluster.

Let's create Helm charts for Prometheus and Grafana:

### 1. Prometheus Helm Chart

**Directory Structure**:
```
prometheus-helm/
│
├── templates/
│   ├── deployment.yaml
│   ├── service.yaml
│   └── configmap.yaml
│
├── values.yaml
└── Chart.yaml
```

- **Chart.yaml**
```yaml
name: prometheus-helm
version: 0.1.0
description: Helm chart for deploying Prometheus
```

- **values.yaml**
```yaml
replicaCount: 1
image:
  repository: prom/prometheus
  tag: latest
service:
  type: ClusterIP
  port: 9090
```

- **templates/deployment.yaml**
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          ports:
            - containerPort: 9090
```

- **templates/service.yaml**
```yaml
apiVersion: v1
kind: Service
metadata:
  name: prometheus
spec:
  selector:
    app: prometheus
  ports:
    - protocol: TCP
      port: 9090
      targetPort: 9090
  type: {{ .Values.service.type }}
```

### 2. Grafana Helm Chart

**Directory Structure**:
```
grafana-helm/
│
├── templates/
│   ├── deployment.yaml
│   ├── service.yaml
│   └── configmap.yaml
│
├── values.yaml
└── Chart.yaml
```

- **Chart.yaml**
```yaml
name: grafana-helm
version: 0.1.0
description: Helm chart for deploying Grafana
```

- **values.yaml**
```yaml
replicaCount: 1
image:
  repository: grafana/grafana
  tag: latest
service:
  type: ClusterIP
  port: 3000
```

- **templates/deployment.yaml**
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          ports:
            - containerPort: 3000
```

- **templates/service.yaml**
```yaml
apiVersion: v1
kind: Service
metadata:
  name: grafana
spec:
  selector:
    app: grafana
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  type: {{ .Values.service.type }}
```

Once you've created these Helm charts, you can deploy them to your Kubernetes cluster:

```bash
helm install prometheus ./prometheus-helm/
helm install grafana ./grafana-helm/
```

Finally, for Grafana's Kubernetes plugin, you would typically access Grafana's UI, navigate to the plugins section, and then install the plugin. Alternatively, you can customize Grafana's configuration to include plugins upon start-up. 

Note: The Helm charts provided are basic templates. Depending on your needs, you might want to add features like persistent storage, ingress controllers, or enhanced configurations. Ensure you properly set up RBAC rules if your cluster requires them.